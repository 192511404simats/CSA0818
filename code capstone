import sqlite3
from datetime import datetime
import time
import threading
import os
from plyer import notification
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# ---------------- DATABASE SETUP ----------------
conn = sqlite3.connect('saving_goals.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS goals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    target_amount REAL NOT NULL,
    current_amount REAL DEFAULT 0,
    reminder_date TEXT,
    reminder_time TEXT
)
''')
conn.commit()

# Add missing columns for older DB versions
for col in ["reminder_date", "reminder_time"]:
    try:
        cursor.execute(f"ALTER TABLE goals ADD COLUMN {col} TEXT")
        conn.commit()
    except sqlite3.OperationalError:
        pass


# ---------------- HELPER FUNCTIONS ----------------
def ensure_statement_folder():
    """Ensure local folder exists for saved statements."""
    folder = os.path.join(os.getcwd(), "Statements")
    if not os.path.exists(folder):
        os.makedirs(folder)
    return folder


def generate_pdf_report():
    """Generate a PDF report and save it to local storage."""
    cursor.execute("SELECT * FROM goals")
    goals = cursor.fetchall()
    if not goals:
        print("No goals to include in report.\n")
        return None

    # Ensure the Statements folder exists
    folder = ensure_statement_folder()

    # Create a timestamped filename for statement history
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    filename = f"Statement_{timestamp}.pdf"
    file_path = os.path.join(folder, filename)

    c = canvas.Canvas(file_path, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica-Bold", 18)
    c.drawString(180, height - 50, "üí∞ Saving Goal Tracker Statement")

    c.setFont("Helvetica", 12)
    y = height - 100
    total_target = 0
    total_saved = 0

    for g in goals:
        id, name, target, current, r_date, r_time = g
        percent = (current / target * 100) if target > 0 else 0
        c.drawString(50, y, f"Goal: {name}")
        y -= 20
        c.drawString(70, y, f"Target: ${target:.2f} | Saved: ${current:.2f} ({percent:.1f}%)")
        y -= 20
        if r_date:
            c.drawString(70, y, f"Reminder Date: {r_date}")
            y -= 20
        if r_time:
            c.drawString(70, y, f"Reminder Time: {r_time}")
            y -= 30

        total_target += target
        total_saved += current

        if y < 100:
            c.showPage()
            y = height - 100

    # Add summary at bottom
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, 100, f"Total Target: ${total_target:.2f}")
    c.drawString(50, 80, f"Total Saved: ${total_saved:.2f}")
    c.drawString(50, 60, f"Overall Progress: {(total_saved / total_target * 100):.1f}%")

    c.setFont("Helvetica-Oblique", 10)
    c.drawString(50, 40, f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    c.save()

    print(f"üìÑ Report generated: {file_path}")
    print(f"üíæ A copy has been saved to local storage in the 'Statements' folder.\n")
    return file_path


def open_pdf(file_path):
    """Open the PDF file automatically."""
    if os.name == 'nt':  # Windows
        os.startfile(file_path)
    elif os.name == 'posix':  # macOS/Linux
        os.system(f"open '{file_path}'")
    else:
        print(f"Please open manually: {file_path}")


def send_notification(title, message):
    """Show a desktop notification."""
    notification.notify(
        title=title,
        message=message,
        timeout=10
    )


# ---------------- GOAL FUNCTIONS ----------------
def add_goal():
    name = input("Enter goal name: ")
    target = float(input("Enter target amount: "))

    reminder_date = input("Enter reminder date (YYYY-MM-DD): ").strip()
    reminder_time = input("Enter reminder time (HH:MM 24hr): ").strip()

    cursor.execute(
        "INSERT INTO goals (name, target_amount, reminder_date, reminder_time) VALUES (?, ?, ?, ?)",
        (name, target, reminder_date, reminder_time)
    )
    conn.commit()
    print("‚úÖ Goal added successfully with reminder!\n")


def view_goals():
    cursor.execute("SELECT * FROM goals")
    goals = cursor.fetchall()
    if not goals:
        print("No goals found.\n")
        return

    print("\nYour Saving Goals:")
    print("-" * 60)
    for g in goals:
        id, name, target, current, r_date, r_time = g
        percent = (current / target * 100) if target > 0 else 0
        print(f"ID: {id}")
        print(f"Goal: {name}")
        print(f"Target: ${target:.2f}")
        print(f"Saved: ${current:.2f} ({percent:.1f}%)")
        if r_date:
            print(f"Reminder Date: {r_date}")
        if r_time:
            print(f"Reminder Time: {r_time}")
        print("-" * 60)
    print()


def update_goal():
    goal_id = input("Enter goal ID to update: ")
    add_amount = float(input("Enter amount to add: "))
    cursor.execute("SELECT current_amount FROM goals WHERE id = ?", (goal_id,))
    goal = cursor.fetchone()

    if goal:
        new_amount = goal[0] + add_amount
        cursor.execute("UPDATE goals SET current_amount = ? WHERE id = ?", (new_amount, goal_id))
        conn.commit()
        print("üí∞ Progress updated!\n")
    else:
        print("Goal not found.\n")


def delete_goal():
    goal_id = input("Enter goal ID to delete: ")
    cursor.execute("DELETE FROM goals WHERE id = ?", (goal_id,))
    conn.commit()
    print("üóë Goal deleted.\n")


# ---------------- REMINDER LOGIC ----------------
def check_reminders():
    """Check reminders every minute and auto-open PDF."""
    now = datetime.now()
    today = now.date().isoformat()
    current_time = now.strftime("%H:%M")

    cursor.execute("SELECT id, name, reminder_date, reminder_time FROM goals WHERE reminder_date IS NOT NULL")
    reminders = cursor.fetchall()

    for g in reminders:
        goal_id, name, r_date, r_time = g
        if r_date == today and r_time == current_time:
            send_notification("üí∞ Saving Reminder", f"Time to save for '{name}'! Opening progress report...")
            print(f"üîî Reminder triggered for '{name}' at {r_time}")

            # Wait a few seconds to simulate ‚Äúclick‚Äù
            time.sleep(5)

            # Generate and auto-open PDF report + save local statement
            pdf_file = generate_pdf_report()
            if pdf_file:
                open_pdf(pdf_file)


def reminder_loop():
    """Run in background to check reminders every minute."""
    while True:
        check_reminders()
        time.sleep(60)


# ---------------- MAIN APP ----------------
def main():
    print("=== üí∞ Saving Goal Tracker (Auto PDF + Local Statement) ===")

    # Start background reminder thread
    reminder_thread = threading.Thread(target=reminder_loop, daemon=True)
    reminder_thread.start()

    while True:
        print("\nChoose an option:")
        print("1Ô∏è‚É£  Add new goal")
        print("2Ô∏è‚É£  View goals")
        print("3Ô∏è‚É£  Update goal progress")
        print("4Ô∏è‚É£  Delete goal")
        print("5Ô∏è‚É£  Generate & Save progress PDF manually")
        print("6Ô∏è‚É£  Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            add_goal()
        elif choice == '2':
            view_goals()
        elif choice == '3':
            update_goal()
        elif choice == '4':
            delete_goal()
        elif choice == '5':
            pdf = generate_pdf_report()
            if pdf:
                open_pdf(pdf)
        elif choice == '6':
            print("Goodbye! üëã")
            break
        else:
            print("Invalid choice, try again.\n")


if __name__ == "__main__":
    main()
    conn.close()
