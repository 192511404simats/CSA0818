import sqlite3
from datetime import datetime, date
import time
import threading
from plyer import notification

# Connect or create database
conn = sqlite3.connect('saving_goals.db', check_same_thread=False)
cursor = conn.cursor()

# Create table with reminder date & time columns
cursor.execute('''
CREATE TABLE IF NOT EXISTS goals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    target_amount REAL NOT NULL,
    current_amount REAL DEFAULT 0,
    reminder_date TEXT,
    reminder_time TEXT
)
''')
conn.commit()

# Try to add missing columns (for old databases)
for col in ["reminder_date", "reminder_time"]:
    try:
        cursor.execute(f"ALTER TABLE goals ADD COLUMN {col} TEXT")
        conn.commit()
    except sqlite3.OperationalError:
        pass  # Column already exists


def add_goal():
    name = input("Enter goal name: ")
    target = float(input("Enter target amount: "))

    reminder_date = input("Enter reminder date (YYYY-MM-DD) — first reminder date: ").strip()
    reminder_time = input("Enter reminder time (HH:MM in 24-hour format) — e.g., 09:00: ").strip()

    cursor.execute(
        "INSERT INTO goals (name, target_amount, reminder_date, reminder_time) VALUES (?, ?, ?, ?)",
        (name, target, reminder_date, reminder_time)
    )
    conn.commit()
    print("✅ Goal added successfully with monthly reminder!\n")


def view_goals():
    cursor.execute("SELECT * FROM goals")
    goals = cursor.fetchall()
    if not goals:
        print("No goals found.\n")
        return

    print("\nYour Saving Goals:")
    print("-" * 60)
    for g in goals:
        id, name, target, current, r_date, r_time = g
        percent = (current / target * 100) if target > 0 else 0
        print(f"ID: {id}")
        print(f"Goal: {name}")
        print(f"Target: ${target:.2f}")
        print(f"Saved: ${current:.2f} ({percent:.1f}%)")
        if r_date:
            print(f"Reminder Date: {r_date}")
        if r_time:
            print(f"Reminder Time: {r_time}")
        print("-" * 60)
    print()


def update_goal():
    goal_id = input("Enter goal ID to update: ")
    add_amount = float(input("Enter amount to add: "))
    cursor.execute("SELECT current_amount FROM goals WHERE id = ?", (goal_id,))
    goal = cursor.fetchone()

    if goal:
        new_amount = goal[0] + add_amount
        cursor.execute("UPDATE goals SET current_amount = ? WHERE id = ?", (new_amount, goal_id))
        conn.commit()
        print("💰 Progress updated!\n")
    else:
        print("Goal not found.\n")


def delete_goal():
    goal_id = input("Enter goal ID to delete: ")
    cursor.execute("DELETE FROM goals WHERE id = ?", (goal_id,))
    conn.commit()
    print("🗑 Goal deleted.\n")


def send_notification(title, message):
    """Send a desktop notification."""
    notification.notify(
        title=title,
        message=message,
        timeout=10
    )


def check_reminders():
    """Check for reminders that match today and current time."""
    now = datetime.now()
    today = now.date().isoformat()
    current_time = now.strftime("%H:%M")

    cursor.execute("SELECT id, name, reminder_date, reminder_time FROM goals WHERE reminder_date IS NOT NULL")
    reminders = cursor.fetchall()

    for g in reminders:
        goal_id, name, r_date, r_time = g
        if r_time and current_time == r_time:
            # Send notification for monthly saving
            send_notification("💰 Monthly Saving Reminder",
                              f"It's {r_time}! Time to save for your goal '{name}'.")
            print(f"🔔 {r_time} — Reminder for '{name}' triggered!\n")

            # Move next reminder to next month automatically
            try:
                d = datetime.strptime(r_date, "%Y-%m-%d")
                next_month = d.replace(month=d.month + 1 if d.month < 12 else 1,
                                       year=d.year if d.month < 12 else d.year + 1)
                new_date = next_month.date().isoformat()
                cursor.execute("UPDATE goals SET reminder_date = ? WHERE id = ?", (new_date, goal_id))
                conn.commit()
            except Exception as e:
                print(f"(⚠️ Could not update next reminder: {e})")


def reminder_loop():
    """Run in background to check reminders every minute."""
    while True:
        check_reminders()
        time.sleep(60)  # check every minute


def main():
    print("=== 💰 Saving Goal Tracker with Monthly Time Reminder ===")

    # Start background thread for automatic checks
    reminder_thread = threading.Thread(target=reminder_loop, daemon=True)
    reminder_thread.start()

    while True:
        print("\nChoose an option:")
        print("1️⃣  Add new goal")
        print("2️⃣  View goals")
        print("3️⃣  Update goal progress")
        print("4️⃣  Delete goal")
        print("5️⃣  Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            add_goal()
        elif choice == '2':
            view_goals()
        elif choice == '3':
            update_goal()
        elif choice == '4':
            delete_goal()
        elif choice == '5':
            print("Goodbye! 👋")
            break
        else:
            print("Invalid choice, try again.\n")


if __name__ == "__main__":
    main()
    conn.close()
